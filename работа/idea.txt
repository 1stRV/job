/прослушка 
/wait notify volatile sincronized добить
/задачи wait notify volatile sincronized 

/sql задачи
/
/добить сборщик

/задачи java 
/задачи spring

Собес:
sql,hashmap
/накидать текст для разговора Насте резюмэ


/законспектировать hibernate
/собрать людей на днюху

/иерархия исключений поправить и почему RunTimeException наследуется от Exception и try-with-resources


/написать проект с HashMap с эндпойнтами разными сортировками 

/проект Exception с разными эндпойнтами

/проект Java с разными эндпойнтами

/проект Spring

/проект Concurency

/проект Stream

/Optional

/12



женя, никита, сергей, максим, денис, 


                          Проект "Markus" Табак
						  
Гос информационная система МОТП(Маркировка оборота табачной продукции).

*Штрих-код(одномерный)
идентицифирует пачку

*QR-код(Quick Responce Code двумерный)
матричный тип штрих-кода

*ОФД(Оператор фискальных данных)
все чеки с кассы уходят в ОФД. 
Например, в приложении Тинькофф можно посмотреть чек и QR-код

Сейчас продается пачка, сканируется QR-код и отправляется в ОФД. ОФД выгружает.

Есть схема общая с системами. А есть конректная схема нашего проекта "Markus"

В магазине есть кассы. Продажа отражается в ОФД. Он их сбрасывает в МОТП. 

Есть еще производители сигарет к нам это не относится, когда они выпускают это тоже сбрасывают в МОТП.

МОТП проверяет что проданная продукция была выпущена поставлена.

Щас тока продажи и выпуск отражаются. В дальнейшем этот оператор МОТП хочет отслеживать все перемещение продукции между разными юрлицами. Мы покупаем не на заводе например, а прежде чем к нам попадает в магазин продукция она проходит через перекупы.

Там тысяча сигарет как отследить продаешь тысяча пачек или две тысячи.

*РЦ(Распределительный центр)Пятерочка, Перекресток, Карусель
склады там стоит свой софт и например поставщик отгружает нам он должен сказать что он отгрузил продукцию такомутому юрлицу АО Перекресток.(у нас 36 юрлиц)

РЦ когда приняло, оно говорит МОТП что эта продукция у нас. РЦ отгружает на магазин. РЦ и магазин могут быть разными юр компаниями.  Эту отгрузку надо тоже зафиксировать в МОТП, что мы передали от одного юрлица другому. 

Потом когда осуществляется продажа идет по той, же цепочке.

Система "Markus" это зеркало МОТП.

*Зеркало веб-сайта
копия одного сервера на другом

МОТП делается потому что все компании на самоокупаемости они содержат себя за счет штрафов, которые выставляются ретаилерам бизнесам, они скажут вы реализуете контрафактную продукцию, у вас ее быть не должно. Чтобы не попадать в неприятные ситуации делаются система "Markus". 

В "Markus" внутри мы будем сами учитывать перемещение. Например, начиная от входа к нам, перемещение между юрлицами, списание, реализация товара, мы должны внутри себя учитывать, эти перемещения будут прогоняться через "Markus" и попадать в МОТП, например, чек ушел в ОФД, и магазин сбросит нам через 

*SAP urp 
бэкофисная система
немецкая 1С дорогая. 
Чеки продаж сбросятся в SAP отдаст нам, мы у себя зафиксируем что товар был реализован. Это 1 из целей. 

Есть более сложная например фонд сведения запутались никто по пачечно не будет принимать. На РЦ приходится 460тыс. пачек в день. 

*Сейчас готово
/1-ый сервис который работает с МОТП. Нету обработчика ошибок, логирования, бизнес-логики. Нам прислали ссылку на работающий МОТП. Макс сделал незавершенный. 

/2-ой сервис master data
мы еще не знаем формат данных, который нам приходит. 

*Микросервисы
они у нас не очень микро, т.к. команда маленькая, и эта хреновена вызывает вызов МОТП 20 функций, и по парадигме микросервисов нам надо 20 микросервисов написать и каждый будет заниматься своей историей. Сейчас разносим по слоям, потом будем разносить по микросервисам. 

Есть МОТП Sender Макс все эти методы пока что в одном классе написал, пометил, что их надо отрефакторить. 

Вызов МОТП например вся логика это ты делаешь GET-запрос получаешь какие-то данные соответственно эта фигня вызывается kafka-Listener ом.

Consumer получает на вход из kafka какой-то запрос и сделал get agregated который просто отправил GET-запрос в МОТП и получил ответ сложил его. 

Это не микросервис так как пока на микровость не заморачивались чтобы они были.

Сейчас они поделены по функционалу.

Задача этого сервиса у него нет бизнес логики он просто обменивается с МОТП, реализует авторизацию, имплементирует в себе и отдает ответ. Это шлюз такой у них. 

Если будут идеи по опыту, то нужно сказать Максу. 

Вот магазины за пределами нашей системы, вот МОТП. Наша задача как-то эту историю проброс сообщений фиксировать у себя. 

МОТП входит не только через нашу систему, потом расскажу.

Есть еще поток когда принимается товар. Он через UPD(универсальный передаточный документ) через IDE провайдер, это гос заморочки, отправляет сюда эту информацию. А нам он скажет, что нам ее отправил. Мы не единственный шлюз в этой системе. 

*Работа системы 
по середине находится Worker Service. (Его потом надо будет пилить на микросервисы)
Пока мы его функционал не очень знаем он у нас один большой сервис.

Worker Service работает с Mongo DB и с Oracle DB(историческая). Это оперативная информация о текущем статусе. Как только статус КИЗ(контрольно-идентифиткационный знак) не актуален тут есть таблица фактов в Oracle DB. Мы планируем скидывать все что нам не надо сейчас в историческую БД, чтобы у нас быстро работала оперативная БД. 

Worker Service несет в себе бизнес логику. Там есть логика как перемещать, что проверять, как сверять, как разносить марки по поставкам, по контрагентам. 

Магазины, склады отправляют запросы.

*Citrix Nite Sceller
маршрутизатор запросов сервис Discovery это ему просто говоришь, что есть такие-то эндпойнты, магазин обращается на 1точку, он знает, что есть эндпойнты, эти сервисы предполгается что горизонтально масштабируются, и он просто разбрасывает входящие запросы между сервисами.

Здесь это Rest API это от него мы уже пересмотрели подход(в понедельник будет встреча расскжут как эта штука работает).

 Изначальн мы предпологали, что это будет Rest API, что ыфзфывают только нас, асинхронно, что нас спросили, мы подумали, сделали, тут должна быть еще одна Mongo DB была. Мы положили готовый ответ когда у нас просят ответ мы проверяем есть ли у нас ответ, отвечаем. Это был щит которым мы хотели разгрузить этот сервис. У нас 16тысяч магазинов, мы прогнозировали, что эта система будет выполнять 7,5милионов операций в день. Количество запросов особенно аинхронных, особенно GET-status 16тыс. магазинов, это могут генерить 30тыс/минуту, 1,8млн/час, в деь 30млн. запросов по 1ому интерфейсу. 
 
 Архитектор сказал REST нам не подходит, чтобы нас не дудосили. Нагружают очень сильно каналы корпоративные. Он предлагают нам, чтобы мы получили запрос, обработали его, а инициировать обратный ответ будем мы c помощью шины API SAP. 
 
*REST будет на вход

*На выход?

Пока рабочий вариант следующий:
Здесь мы поднимаем REST API он получает запрос, единственная его задача трансформировать наше внутреннее представление, например, мы получаем XML неудобный с лишними полями, он его форматирует в JSON и складывает его в kafka. 

*Kafka
работает как очередь, Worker Service забирает эти запросы из kafka обрабатывает. Ответ он складывает в kafka. Здесь есть Listener в этом же сервисе или в другом, и он получает ответ из kafka и просто будет пробрасывать его дальше, это будет не Rest мы будем сами его инициировать соединение с магазином, с теми, кто запросил. Надо будет хранить кому мы отвечаем, на какой запрос. 

Возможно это будет 2сервиса, 1будет REST API на вход, другой сервис мы его 





 



















